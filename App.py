import os  # os : Permet d'interagir avec le syst√®me d'exploitation, utilis√© ici pour manipuler les chemins de fichiers, par exemple pour charger le mod√®le depuis un r√©pertoire sp√©cifique.
import pandas as pd # pandas : Biblioth√®que puissante pour la manipulation et l'analyse des donn√©es. Elle permet de cr√©er des DataFrame, de les manipuler facilement.
import streamlit as st # streamlit : Framework pour la cr√©ation d'applications web interactives. Il permet de cr√©er facilement une interface utilisateur pour interagir avec les mod√®les de machine learning et afficher les r√©sultats en temps r√©el.
import joblib # joblib : Utilis√© pour la s√©rialisation et la d√©s√©rialisation des objets Python. Ici, il est utilis√© pour charger un mod√®le de machine learning pr√©alablement entra√Æn√© et sauvegard√© (fichier .pkl).
import altair as alt # altair : Biblioth√®que de visualisation de donn√©es d√©clarative qui permet de cr√©er des graphiques interactifs. Elle est utilis√©e ici pour afficher des visualisations interactives des donn√©es saisies.
import numpy as np # numpy : Biblioth√®que pour le calcul num√©rique en Python. Utilis√©e ici pour les calculs trigonom√©triques dans le radar chart.

# --- TITRE ET DESCRIPTION ---
st.markdown("<h1 style='color:silver; font-weight:bold;'> üîÆ Pr√©diction du Risque de l'octroi d'un Cr√©dit bancaire utilisant un Mod√®le de Machine Learning (Decision Tree)</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='color:CYAN;'>Bonjour!üòä je suis <b>Olivier Hell</b></h2>", unsafe_allow_html=True)
st.markdown("<p style='font-size:18px;'>Cette application utilise un mod√®le de Machine Learning pour d√©tecter si un client peut √™tre consid√©r√© comme risqu√© ou non en fonction de ses informations financi√®res et personnelles.</p>", unsafe_allow_html=True)

# --- CHARGEMENT DU MOD√àLE ---
script_dir = os.path.dirname(__file__)
model_path = os.path.join(script_dir, "tree_model.pkl")

try:
    model_pipeline = joblib.load(model_path)
    if model_pipeline is None:
        st.error("Le mod√®le n'a pas √©t√© charg√© correctement.")
except Exception as e:
    st.error(f"Erreur lors du chargement du mod√®le : {str(e)}")
    model_pipeline = None

# --- SIDEBAR : INPUTS UTILISATEUR ---
st.sidebar.header("Informations du Client")

# Inputs num√©riques
person_age = st.sidebar.number_input("√Çge", min_value=18, max_value=100, value=30)
person_income = st.sidebar.number_input("Revenu Annuel (‚Ç¨)", min_value=1000.0, max_value=1000000.0, value=50000.0, step=1000.0)
person_emp_length = st.sidebar.number_input("Anciennet√© Professionnelle (ann√©es)", min_value=0.0, max_value=60.0, value=5.0, step=0.5)
loan_amnt = st.sidebar.number_input("Montant du Pr√™t (‚Ç¨)", min_value=500.0, max_value=1000000.0, value=10000.0, step=500.0)
loan_int_rate = st.sidebar.number_input("Taux d'Int√©r√™t (%)", min_value=0.0, max_value=50.0, value=5.0, step=0.1)
loan_percent_income = st.sidebar.number_input("Pourcentage du Pr√™t sur le Revenu (%)", min_value=0.0, max_value=100.0, value=20.0, step=1.0)
cb_person_cred_hist_length = st.sidebar.number_input("Historique de Cr√©dit (ann√©es)", min_value=0.0, max_value=50.0, value=10.0, step=0.5)

# Cat√©gories pour propri√©t√© du logement
st.sidebar.subheader("Propri√©t√© du Logement")
home_options = ["OTHER", "OWN", "RENT"]
home_choice = st.sidebar.selectbox("Choisissez la cat√©gorie", home_options)

# Cat√©gories pour l'intention du pr√™t
st.sidebar.subheader("Intention du Pr√™t")
intent_options = ["EDUCATION", "HOMEIMPROVEMENT", "MEDICAL", "PERSONAL", "VENTURE"]
intent_choice = st.sidebar.selectbox("Choisissez le type de pr√™t", intent_options)

# Cat√©gories pour le grade du pr√™t
st.sidebar.subheader("Grade du Pr√™t")
grade_options = ["B", "C", "D", "E", "F", "G"]
grade_choice = st.sidebar.selectbox("Choisissez le grade", grade_options)

# Historique de d√©faut
st.sidebar.subheader("Historique de D√©faut")
default_option = st.sidebar.radio("Le client est-il d√©j√† en d√©faut ?", ("Non", "Oui"))
cb_person_default_on_file_Y = 1 if default_option == "Oui" else 0

# --- CONSTRUCTION DU DATAFRAME ---
input_data = {
    "person_age": [person_age],
    "person_income": [person_income],
    "person_emp_length": [person_emp_length],
    "loan_amnt": [loan_amnt],
    "loan_int_rate": [loan_int_rate],
    "loan_percent_income": [loan_percent_income],
    "cb_person_cred_hist_length": [cb_person_cred_hist_length],
    f"person_home_ownership_{home_choice}": [1],
    f"loan_intent_{intent_choice}": [1],
    f"loan_grade_{grade_choice}": [1],
    "cb_person_default_on_file_Y": [cb_person_default_on_file_Y]
}

input_df = pd.DataFrame(input_data).fillna(0)  # Remplir les valeurs manquantes par 0

# --- VERIFICATION DES COLONNES ---
if model_pipeline is not None:
    missing_cols = set(model_pipeline.feature_names_in_) - set(input_df.columns)
    for col in missing_cols:
        input_df[col] = 0  # Ajouter les colonnes manquantes avec des valeurs par d√©faut

    # R√©ordonner les colonnes pour correspondre au mod√®le
    input_df = input_df[model_pipeline.feature_names_in_]

    # S'assurer que toutes les valeurs sont bien en float64
    input_df = input_df.astype ('float64')

# --- AFFICHAGE DES DONN√âES ---
st.subheader("R√©sum√© des Informations Saisies")
st.dataframe(input_df)  # Affiche le tableau horizontalement sans transposition

# --- PREDICTION ---
if st.button("Pr√©dire le Risque de Cr√©dit"):
    if model_pipeline is None:
        st.error("Le mod√®le n'est pas charg√©. Impossible de faire la pr√©diction.")
    else:
        try:
            st.write("V√©rification des donn√©es avant pr√©diction...")
            st.write(input_df)

            prediction = model_pipeline.predict(input_df)
            resultat = "Risqu√©" if prediction[0] == 1 else "Non Risqu√©"
            couleur = "red" if prediction[0] == 1 else "green"

            st.markdown(f"<h3 style='color:{couleur}; font-weight:bold;'>Pr√©diction: {resultat}</h3>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Erreur lors de la pr√©diction : {str(e)}")


# --- VISUALISATION INTERACTIVE FILTR√âE ---
st.subheader("Visualisation Interactive")

# Filtrer le DataFrame pour ne garder que les colonnes int√©ressantes
df_filtered = input_df[['person_income', 'loan_amnt']].copy()
df_filtered.rename(columns={'person_income': 'Revenu Annuel (‚Ç¨)', 'loan_amnt': 'Montant du Pr√™t (‚Ç¨)'}, inplace=True)

# Transformer le DataFrame pour le diagramme circulaire
df_melt_filtered = df_filtered.melt(var_name="Caract√©ristique", value_name="Valeur")

# D√©finir une s√©lection interactive via la l√©gende
selection = alt.selection_point(fields=["Caract√©ristiques"], bind="legend")

# Cr√©ation d'un diagramme circulaire (donut) interactif
pie_chart_filtered = alt.Chart(df_melt_filtered).mark_arc(innerRadius=50).encode(
    theta=alt.Theta(field="Valeur", type="quantitative"),
    color=alt.Color(field="Caract√©ristique", type="nominal", scale=alt.Scale(scheme="category20b")),
    tooltip=["Caract√©ristique", "Valeur"],
    opacity=alt.condition(selection, alt.value(1), alt.value(0.5))
).add_params(
    selection
).properties(
    width=400,
    height=400
)

st.altair_chart(pie_chart_filtered, use_container_width=True)


